# syntax=docker/dockerfile:1

ARG UV_VERSION=0.6.16
ARG PYTHON_VERSION=3.13

# === UV Stage ===
FROM ghcr.io/astral-sh/uv:${UV_VERSION} AS uv

# === Builder Stage ===
FROM python:${PYTHON_VERSION}-slim-bookworm AS builder

COPY --from=uv /uv /uvx /bin/

WORKDIR /app

ENV UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy \
    UV_SYSTEM_PYTHON=1 \
    UV_PROJECT_ENVIRONMENT=/usr/local

RUN apt-get update && apt-get install -y --no-install-recommends curl && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Install dependencies
RUN --mount=type=cache,target=/root/.cache/uv \
    --mount=type=bind,source=uv.lock,target=uv.lock \
    --mount=type=bind,source=pyproject.toml,target=pyproject.toml \
    uv sync --frozen --no-install-project --compile-bytecode && \
    uv pip list

# === Runtime Base Stage ===
FROM python:${PYTHON_VERSION}-slim-bookworm AS base

ENV PYTHONDONTWRITEBYTECODE=1 \
    PYTHONUNBUFFERED=1

WORKDIR /app

# Copy Python deps from builder
COPY --from=builder /usr/local /usr/local

# Create user and folders
ARG UID=10001
RUN adduser --disabled-password --gecos "" --home "/nonexistent" \
    --shell "/sbin/nologin" --no-create-home --uid "${UID}" appuser && \
    mkdir -p /app/static /app/media /app/logs && \
    chown -R appuser:appuser /app/static /app/media /app/logs

# === Celery Worker Stage ===
FROM base AS celery

COPY SimWorks /app/SimWorks
WORKDIR /app/SimWorks
CMD ["celery", "-A", "config", "worker", "--pool=threads", "--loglevel=info"]

# === Celery Beat Stage ===
FROM base AS beat

COPY SimWorks /app/SimWorks
WORKDIR /app/SimWorks
CMD ["celery", "-A", "config", "beat", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler"]

# === Web Stage (default) ===
FROM base AS web

COPY SimWorks /app/SimWorks
COPY docker/entrypoint.prod.sh /app/docker/entrypoint.sh
COPY docker/healthcheck.sh /app/docker/healthcheck.sh

RUN apt-get update && apt-get install -y --no-install-recommends curl && \
    apt-get clean && rm -rf /var/lib/apt/lists/*
RUN chmod +x /app/docker/*.sh

HEALTHCHECK --interval=10s --timeout=5s --start-period=10s --retries=10 CMD /app/docker/healthcheck.sh

WORKDIR /app/SimWorks
ENTRYPOINT ["/app/docker/entrypoint.sh"]