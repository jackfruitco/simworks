services:
  server:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
      target: web
    env_file:
      - .env
    expose:
      - 8000
    hostname: 'server'
    volumes:
      # - ..:/app
      - static-vol:/app/static
      - media-vol:/app/media
    command: [ "bash", "/app/docker/entrypoint.dev.sh" ]
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - SimWorksNet
    depends_on:
      db:
        condition: service_healthy

  db:
    image: postgres:${DB_IMAGE_TAG:-17.2-alpine}
    restart: always
    user: postgres
    volumes:
      - db-data:/var/lib/postgresql/data
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${DB_NAME:-AppDatabase}
      POSTGRES_USER: ${DB_USER:-appuser}
      POSTGRES_PASSWORD: ${DB_PASSWORD:?password not set!}
      POSTGRES_HOST: ${DB_HOST:-db}
      POSTGRES_PORT: ${DB_PORT:-5432}
    networks:
      - SimWorksNet
    expose:
      - '${DB_PORT:-5432}'
    hostname: 'db'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DB_USER:-appuser} -d ${DB_NAME:-AppDatabase} -h 127.0.0.1 -p ${DB_PORT:-5432}" ]
      interval: 10s
      timeout: 5s
      retries: 5

  nginx:
    image: nginx:${PROXY_IMAGE_TAG:-latest}
    # user: "${DOCKER_UID:-10001}:${DOCKER_GID:-10001}"
    ports:
      - "80:80"
    env_file:
      - .env
    volumes:
      - ../nginx/nginx.template.conf:/etc/nginx/nginx.template.conf:ro
      - ../nginx/default.dev.conf:/etc/nginx/conf.d/default.conf:ro
      - ../nginx/nginx-entrypoint.sh:/docker-entrypoint.d/nginx-entrypoint.sh:ro
      - static-vol:/app/static
      - media-vol:/app/media
    depends_on:
      - server
    networks:
      - SimWorksNet
    entrypoint: ["/bin/sh", "/docker-entrypoint.d/nginx-entrypoint.sh"]

  redis:
    image: redis:${REDIS_IMAGE_TAG:-7.4.2-alpine}
    command: redis-server --requirepass ${REDIS_PASSWORD:?password not set!}
    entrypoint: []
    container_name: ${REDIS_HOSTNAME:-redis}
    hostname: ${REDIS_HOSTNAME:-redis}
    networks:
      - SimWorksNet
    expose:
      - '${REDIS_PORT:-6379}'

  celery:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
      target: celery
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app/SimWorks
    # user: appuser
    user: root
    # command: [ "celery", "-A", "config", "worker", "--loglevel=info" ]
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    volumes:
      - static-vol:/app/static
      - media-vol:/app/media
    restart: unless-stopped
    networks:
      - SimWorksNet
    hostname: 'celery-worker'
    healthcheck:
      test: [ "CMD", "celery", "-A", "config", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  celerybeat:
    build:
      context: ..
      dockerfile: docker/Dockerfile.dev
      target: beat
    user: appuser
    env_file:
      - .env
    environment:
      - PYTHONPATH=/app/SimWorks
    # command: [ "celery", "-A", "config", "beat", "--loglevel=info", "--scheduler", "django_celery_beat.schedulers:DatabaseScheduler" ]
    volumes:
      - static-vol:/app/static
      - media-vol:/app/media
    depends_on:
      redis:
        condition: service_started
      db:
        condition: service_healthy
    networks:
      - SimWorksNet
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "celery", "-A", "config", "status" ]
      interval: 30s
      timeout: 10s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  db-data:
  static-vol:
  media-vol:
networks:
  SimWorksNet:
    driver: bridge
